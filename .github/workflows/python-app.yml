name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password123
          POSTGRES_DB: nss
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12.3
        uses: actions/setup-python@v3
        with:
          python-version: "3.12.3"

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create database schema
        env:
          PGHOST: localhost
          PGUSER: postgres
          PGPASSWORD: password123
          PGDATABASE: nss
        run: |
          cat <<-EOF > schema.sql
          -- Table: honeypot
          CREATE TABLE IF NOT EXISTS honeypot (
            id SERIAL,
            timestamp timestamp NOT NULL,
            alert_type character varying(255) NOT NULL,
            src_ip inet NOT NULL,
            dst_ip inet NOT NULL,
            port integer NOT NULL,
            PRIMARY KEY (id)
          );

          -- Table: link_layer_packet
          CREATE TABLE IF NOT EXISTS link_layer_packet (
            protocol character varying(255),
            destination_mac character varying(20),
            source_mac character varying(20),
            network_packet_type character varying(150),
            raw_data integer[] NOT NULL,
            timestamp timestamp NOT NULL,
            PRIMARY KEY (timestamp, raw_data)
          );

          -- Table: snmp_metrics
          CREATE TABLE IF NOT EXISTS snmp_metrics (
            id SERIAL,
            hostname character varying(255),
            system_uptime double precision,
            cpu_usage double precision,
            ram_used double precision,
            ram_total double precision,
            ram_percent_used double precision,
            root_dir_used_storage double precision,
            root_dir_total_storage double precision,
            root_dir_percent_used double precision,
            timestamp timestamp DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (id)
          );

          -- Table: suricata
          CREATE TABLE IF NOT EXISTS suricata (
            id SERIAL,
            timestamp timestamp NOT NULL,
            source_ip inet NOT NULL,
            source_port integer NOT NULL,
            dest_ip inet NOT NULL,
            dest_port integer NOT NULL,
            protocol character varying(50) NOT NULL,
            alert_message text NOT NULL,
            PRIMARY KEY (id),
            UNIQUE (timestamp, source_ip, source_port, dest_ip, dest_port, protocol, alert_message)
          );

          -- Table: users
          CREATE TABLE IF NOT EXISTS users (
            id SERIAL,
            role character varying(50) NOT NULL,
            username character varying(100) NOT NULL,
            password_hash text NOT NULL,
            salt text NOT NULL,
            PRIMARY KEY (id),
            UNIQUE (username)
          );
          EOF

          psql -f schema.sql

      - name: List tables after schema creation
        env:
          PGHOST: localhost
          PGUSER: postgres
          PGPASSWORD: password123
          PGDATABASE: nss
        run: psql -c "\dt"

      - name: Run unit tests
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_USER: postgres
          DATABASE_PASSWORD: password123
          DATABASE_NAME: nss
        run: |
          python -m unittest discover -s project_unittesting -t .

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
